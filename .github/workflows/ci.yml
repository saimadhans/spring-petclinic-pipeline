name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      JFROG_URL: ${{ secrets.JFROG_URL }}
      JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
      JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
      MAVEN_REPO: ${{ secrets.MAVEN_REPO }}
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build and test with Maven using JFrog remote repo
      run: |
        mkdir -p ~/.m2
        cp .jfrog/settings.xml ~/.m2/settings.xml
        ./mvnw clean package -DskipTests

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Extract JFrog hostname for Docker tag
      run: |
        echo "JFROG_REGISTRY=${JFROG_URL#https://}" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -t $JFROG_REGISTRY/$DOCKER_REPO/spring-petclinic:latest .

    - name: Log in to JFrog Docker repo
      run: |
        echo $JFROG_PASSWORD | docker login $JFROG_REGISTRY -u $JFROG_USERNAME --password-stdin

    - name: Push Docker image to JFrog Artifactory
      run: |
        docker push $JFROG_REGISTRY/$DOCKER_REPO/spring-petclinic:latest

    - name: Download Xray scan summary with retry
      run: |
        for i in {1..10}; do
          echo "Attempt $i: Fetching Xray scan summary..."
          curl -s -u "$JFROG_USERNAME:$JFROG_PASSWORD" \
            -X POST "$JFROG_URL/xray/api/v2/summary/component" \
            -H "Content-Type: application/json" \
            -d "{
              \"component_details\": [{
                \"component_id\": \"docker://${DOCKER_REPO}/spring-petclinic:latest\",
                \"package_type\": \"Docker\"
              }]
            }" \
            -o xray-scan-report.json

          if grep -q "\"summary\"" xray-scan-report.json && ! grep -q "Component not found" xray-scan-report.json; then
            echo "Scan report is ready."
            break
          else
            echo "Scan report not ready, waiting 20s..."
            sleep 30
          fi
        done

    - name: Commit and push Xray scan report if it changed
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add xray-scan-report.json
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Fix: Retry Xray summary until scan is ready"
          git push
