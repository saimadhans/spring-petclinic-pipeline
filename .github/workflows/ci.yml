name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      JFROG_URL:      ${{ secrets.JFROG_URL }}      
      JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
      JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
      MAVEN_REPO:     ${{ secrets.MAVEN_REPO }}     
      DOCKER_REPO:    ${{ secrets.DOCKER_REPO }}   
      XRAY_PROJECT:   ${{ secrets.JFROG_PROJECT }} 

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up Temurin 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    - name: Cache Maven deps
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2-

    - name: Build with Maven (resolving via Artifactory)
      run: |
        mkdir -p ~/.m2
        cp .jfrog/settings.xml ~/.m2/settings.xml
        ./mvnw -B clean verify           # run tests; drop -DskipTests if you really need them skipped

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Define image tag
      run: |
        echo "JFROG_REGISTRY=${JFROG_URL#https://}" >> "$GITHUB_ENV"
        echo "IMAGE=${JFROG_REGISTRY}/${DOCKER_REPO}/spring-petclinic:latest" >> "$GITHUB_ENV"

    - name: Build image
      run: docker build -t "$IMAGE" .

    - name: Log in to Artifactory Docker repo
      run: |
        echo "$JFROG_PASSWORD" | docker login "$JFROG_REGISTRY" -u "$JFROG_USERNAME" --password-stdin

    - name: Push image and capture digest
      id: push_image
      run: |
        digest=$(docker push "$IMAGE" | grep -m 1 'digest:' | awk '{print $3}')
        echo "DIGEST=$digest" >> "$GITHUB_ENV"
        echo "Image digest: $digest"

    - name: Poll Xray until scan DONE
      env:
        XRAY_STATUS_URL: ${{ env.JFROG_URL }}/xray/api/v1/artifact/status
      run: |
        sudo apt-get -qq update && sudo apt-get -qq install -y jq
        for i in {1..20}; do
          echo "⏳  Scan status check $i/20"
          if [ -n "$XRAY_PROJECT" ]; then
            PROJECT_HEADER=(-H "X-JFrog-Project-Id: $XRAY_PROJECT")
          else
            PROJECT_HEADER=()
          fi
          status=$(curl -s -u "$JFROG_USERNAME:$JFROG_PASSWORD" \
                     "${PROJECT_HEADER[@]}" \
                     -H "Content-Type: application/json" \
                     -X POST "$XRAY_STATUS_URL" \
                     -d "{\"repo\":\"$DOCKER_REPO\",\"path\":\"spring-petclinic/latest/manifest.json\"}" \
                     | jq -r '.status // empty')
          echo "    current status: ${status:-null}"
          [ "$status" = "DONE" ] && { echo "Xray scan complete"; break; }
          sleep 30
        done
        [ "$status" = "DONE" ] || { echo "Xray scan timed out"; exit 1; }

    - name: Fetch Xray artifact summary JSON
      env:
        XRAY_SUMMARY_URL: ${{ env.JFROG_URL }}/xray/api/v1/summary/artifact
      run: |
        if [ -n "$XRAY_PROJECT" ]; then
          PROJECT_HEADER=(-H "X-JFrog-Project-Id: $XRAY_PROJECT")
        else
          PROJECT_HEADER=()
        fi
        PATH_STRING="default/${DOCKER_REPO}/spring-petclinic/latest/manifest.json"
        curl -s -u "$JFROG_USERNAME:$JFROG_PASSWORD" \
             "${PROJECT_HEADER[@]}" \
             -H "Content-Type: application/json" \
             -X POST "$XRAY_SUMMARY_URL" \
             -d "{\"paths\":[\"${PATH_STRING}\"]}" \
             -o xray-scan-report.json
        grep -q '"issues"' xray-scan-report.json || { echo "summary missing data"; cat xray-scan-report.json; exit 1; }



    - name: Commit ⇢ xray-scan-report.json (if changed)
      run: |
        git config user.name  "github-actions"
        git config user.email "actions@github.com"
        git add xray-scan-report.json
        git diff --cached --quiet && echo "No changes" || { \
          git commit -m "ci: update Xray scan summary" && git push; }
