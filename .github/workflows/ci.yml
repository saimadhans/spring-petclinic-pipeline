name: CI/CD Pipeline

on:
  push:
    branches: ["main"]

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      JFROG_URL:      ${{ secrets.JFROG_URL }}         # https://<domain>.jfrog.io
      JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
      JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
      MAVEN_REPO:     ${{ secrets.MAVEN_REPO }}        # libs-release-remote (example)
      DOCKER_REPO:    ${{ secrets.DOCKER_REPO }}       # docker-local (example)
      XRAY_PROJECT:   ${{ secrets.JFROG_PROJECT }}     # leave blank if not using Xray Projects

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build and test with Maven (resolving from JFrog)
      run: |
        mkdir -p ~/.m2
        cp .jfrog/settings.xml ~/.m2/settings.xml
        ./mvnw clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract JFrog hostname for Docker tag
      run: echo "JFROG_REGISTRY=${JFROG_URL#https://}" >> "$GITHUB_ENV"

    - name: Build Docker image
      run: |
        docker build -t "$JFROG_REGISTRY/$DOCKER_REPO/spring-petclinic:latest" .

    - name: Log in to JFrog Docker repo
      run: |
        echo "$JFROG_PASSWORD" | docker login "$JFROG_REGISTRY" -u "$JFROG_USERNAME" --password-stdin

    # ------------ push image and capture digest ------------
    - name: Push Docker image to JFrog Artifactory
      id: push_image
      run: |
        digest=$(docker push "$JFROG_REGISTRY/$DOCKER_REPO/spring-petclinic:latest" | awk '/^digest:/ {print $2}')
        echo "DIGEST=$digest" >> "$GITHUB_ENV"
        echo "Image digest: $digest"

    # ------------ wait for Xray to finish scanning the image ------------
    - name: Wait for Xray scan to finish
      env:
        XRAY_STATUS_URL: ${{ env.JFROG_URL }}/xray/api/v1/artifact/status
      run: |
        ARTIFACT_PATH="default/${DOCKER_REPO}/spring-petclinic/manifests/${DIGEST}"
        for i in {1..20}; do
          echo "Polling Xray scan status, attempt ${i}"
          if [ -n "$XRAY_PROJECT" ]; then
            PROJECT_HEADER=(-H "X-JFrog-Project-Id: $XRAY_PROJECT")
          else
            PROJECT_HEADER=()
          fi
          STATUS=$(curl -s -u "${JFROG_USERNAME}:${JFROG_PASSWORD}" \
                     "${PROJECT_HEADER[@]}" \
                     -H "Content-Type: application/json" \
                     -X POST "$XRAY_STATUS_URL" \
                     -d "{\"path\":\"${ARTIFACT_PATH}\"}" | jq -r '.status // empty')
          echo "Current status: ${STATUS:-null}"
          if [ "$STATUS" = "DONE" ]; then
            echo "Scan completed."
            break
          fi
          sleep 30
        done
        if [ "$STATUS" != "DONE" ]; then
          echo "Xray scan did not finish in time." >&2
          exit 1
        fi

    # ------------ download the finished component summary ------------
    - name: Download Xray scan summary
      env:
        XRAY_SUMMARY_URL: ${{ env.JFROG_URL }}/xray/api/v1/summary/component
        COMPONENT_ID:     docker://${{ env.DOCKER_REPO }}/spring-petclinic:latest
      run: |
        if [ -n "$XRAY_PROJECT" ]; then
          PROJECT_HEADER=(-H "X-JFrog-Project-Id: $XRAY_PROJECT")
        else
          PROJECT_HEADER=()
        fi
        curl -s -u "${JFROG_USERNAME}:${JFROG_PASSWORD}" \
             "${PROJECT_HEADER[@]}" \
             -H "Content-Type: application/json" \
             -X POST "$XRAY_SUMMARY_URL" \
             -d "{\"component_details\":[{\"component_id\":\"${COMPONENT_ID}\",\"package_type\":\"Docker\"}]}" \
             -o xray-scan-report.json
        if ! grep -q '"components"' xray-scan-report.json; then
          echo "Xray summary does not contain expected data." >&2
          cat xray-scan-report.json
          exit 1
        fi

    - name: Commit and push Xray scan report if it changed
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add xray-scan-report.json
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "ci: update Xray scan summary"
          git push
        fi
